// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseMsg.proto
// Protobuf C++ Version: 5.26.0

#include "BaseMsg.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Base {

inline constexpr TimerEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : code_{static_cast< ::Base::TimerOpcode >(0)},
        id_{0},
        delay_{0},
        repeat_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TimerEvent::TimerEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TimerEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimerEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimerEventDefaultTypeInternal() {}
  union {
    TimerEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimerEventDefaultTypeInternal _TimerEvent_default_instance_;

inline constexpr BaseMsg::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : msg_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{::int64_t{0}},
        verison_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BaseMsg::BaseMsg(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct BaseMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseMsgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseMsgDefaultTypeInternal() {}
  union {
    BaseMsg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseMsgDefaultTypeInternal _BaseMsg_default_instance_;
}  // namespace Base
namespace Base {
PROTOBUF_CONSTINIT const uint32_t ServerType_internal_data_[] = {
    262144u, 0u, };
bool ServerType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    ServerType_strings[4] = {};

static const char ServerType_names[] = {
    "ST_CLIENT"
    "ST_GAME"
    "ST_GATE"
    "ST_NONE"
};

static const ::google::protobuf::internal::EnumEntry ServerType_entries[] =
    {
        {{&ServerType_names[0], 9}, 1},
        {{&ServerType_names[9], 7}, 3},
        {{&ServerType_names[16], 7}, 2},
        {{&ServerType_names[23], 7}, 0},
};

static const int ServerType_entries_by_number[] = {
    3,  // 0 -> ST_NONE
    0,  // 1 -> ST_CLIENT
    2,  // 2 -> ST_GATE
    1,  // 3 -> ST_GAME
};

const std::string& ServerType_Name(ServerType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          ServerType_entries, ServerType_entries_by_number,
          4, ServerType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      ServerType_entries, ServerType_entries_by_number, 4,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : ServerType_strings[idx].get();
}

bool ServerType_Parse(absl::string_view name, ServerType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      ServerType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ServerType>(int_value);
  }
  return success;
}
PROTOBUF_CONSTINIT const uint32_t TimerOpcode_internal_data_[] = {
    327680u, 0u, };
bool TimerOpcode_IsValid(int value) {
  return 0 <= value && value <= 4;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    TimerOpcode_strings[5] = {};

static const char TimerOpcode_names[] = {
    "TM_ADD"
    "TM_DEL"
    "TM_DEL_ALL"
    "TM_NONE"
    "TM_TICK"
};

static const ::google::protobuf::internal::EnumEntry TimerOpcode_entries[] =
    {
        {{&TimerOpcode_names[0], 6}, 1},
        {{&TimerOpcode_names[6], 6}, 2},
        {{&TimerOpcode_names[12], 10}, 3},
        {{&TimerOpcode_names[22], 7}, 0},
        {{&TimerOpcode_names[29], 7}, 4},
};

static const int TimerOpcode_entries_by_number[] = {
    3,  // 0 -> TM_NONE
    0,  // 1 -> TM_ADD
    1,  // 2 -> TM_DEL
    2,  // 3 -> TM_DEL_ALL
    4,  // 4 -> TM_TICK
};

const std::string& TimerOpcode_Name(TimerOpcode value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          TimerOpcode_entries, TimerOpcode_entries_by_number,
          5, TimerOpcode_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      TimerOpcode_entries, TimerOpcode_entries_by_number, 5,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : TimerOpcode_strings[idx].get();
}

bool TimerOpcode_Parse(absl::string_view name, TimerOpcode* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      TimerOpcode_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<TimerOpcode>(int_value);
  }
  return success;
}
// ===================================================================

class BaseMsg::_Internal {
 public:
};

BaseMsg::BaseMsg(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Base.BaseMsg)
}
inline PROTOBUF_NDEBUG_INLINE BaseMsg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : msg_(arena, from.msg_),
        _cached_size_{0} {}

BaseMsg::BaseMsg(
    ::google::protobuf::Arena* arena,
    const BaseMsg& from)
    : ::google::protobuf::MessageLite(arena) {
  BaseMsg* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, verison_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::verison_));

  // @@protoc_insertion_point(copy_constructor:Base.BaseMsg)
}
inline PROTOBUF_NDEBUG_INLINE BaseMsg::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : msg_(arena),
        _cached_size_{0} {}

inline void BaseMsg::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, verison_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::verison_));
}
BaseMsg::~BaseMsg() {
  // @@protoc_insertion_point(destructor:Base.BaseMsg)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void BaseMsg::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.msg_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
BaseMsg::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[13];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_._cached_size_),
          true,
      },
      "Base.BaseMsg",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void BaseMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Base.BaseMsg)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.verison_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.verison_));
  _internal_metadata_.Clear<std::string>();
}

const char* BaseMsg::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 24, 2> BaseMsg::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BaseMsg_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Base::BaseMsg>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 verison = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_.verison_)}},
    // int64 id = 2;
    {::_pbi::TcParser::FastV64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_.id_)}},
    // string msg = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_.msg_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 verison = 1;
    {PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_.verison_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 id = 2;
    {PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string msg = 3;
    {PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_.msg_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\14\0\0\3\0\0\0\0"
    "Base.BaseMsg"
    "msg"
  }},
};

::uint8_t* BaseMsg::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Base.BaseMsg)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 verison = 1;
  if (this->_internal_verison() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_verison(), target);
  }

  // int64 id = 2;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_id(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    const std::string& _s = this->_internal_msg();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Base.BaseMsg.msg");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Base.BaseMsg)
  return target;
}

::size_t BaseMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Base.BaseMsg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_msg());
  }

  // int64 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // int32 verison = 1;
  if (this->_internal_verison() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_verison());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void BaseMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BaseMsg*>(
      &from));
}

void BaseMsg::MergeFrom(const BaseMsg& from) {
  BaseMsg* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Base.BaseMsg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_verison() != 0) {
    _this->_impl_.verison_ = from._impl_.verison_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BaseMsg::CopyFrom(const BaseMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Base.BaseMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BaseMsg::IsInitialized() const {
  return true;
}

void BaseMsg::InternalSwap(BaseMsg* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.msg_, &other->_impl_.msg_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_.verison_)
      + sizeof(BaseMsg::_impl_.verison_)
      - PROTOBUF_FIELD_OFFSET(BaseMsg, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

// ===================================================================

class TimerEvent::_Internal {
 public:
};

TimerEvent::TimerEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Base.TimerEvent)
}
TimerEvent::TimerEvent(
    ::google::protobuf::Arena* arena, const TimerEvent& from)
    : TimerEvent(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TimerEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TimerEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, code_),
           0,
           offsetof(Impl_, repeat_) -
               offsetof(Impl_, code_) +
               sizeof(Impl_::repeat_));
}
TimerEvent::~TimerEvent() {
  // @@protoc_insertion_point(destructor:Base.TimerEvent)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TimerEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
TimerEvent::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[16];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_._cached_size_),
          true,
      },
      "Base.TimerEvent",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void TimerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:Base.TimerEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.code_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.repeat_) -
      reinterpret_cast<char*>(&_impl_.code_)) + sizeof(_impl_.repeat_));
  _internal_metadata_.Clear<std::string>();
}

const char* TimerEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> TimerEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TimerEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Base::TimerEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 repeat = 4;
    {::_pbi::TcParser::FastV32S1,
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.repeat_)}},
    // .Base.TimerOpcode code = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.code_)}},
    // int32 id = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.id_)}},
    // int32 delay = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.delay_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .Base.TimerOpcode code = 1;
    {PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 id = 2;
    {PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 delay = 3;
    {PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.delay_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 repeat = 4;
    {PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.repeat_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TimerEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Base.TimerEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .Base.TimerOpcode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_code(), target);
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_id(), target);
  }

  // int32 delay = 3;
  if (this->_internal_delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_delay(), target);
  }

  // int32 repeat = 4;
  if (this->_internal_repeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_repeat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Base.TimerEvent)
  return target;
}

::size_t TimerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Base.TimerEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Base.TimerOpcode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  // int32 id = 2;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_id());
  }

  // int32 delay = 3;
  if (this->_internal_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_delay());
  }

  // int32 repeat = 4;
  if (this->_internal_repeat() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_repeat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TimerEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TimerEvent*>(
      &from));
}

void TimerEvent::MergeFrom(const TimerEvent& from) {
  TimerEvent* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Base.TimerEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_code() != 0) {
    _this->_impl_.code_ = from._impl_.code_;
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_delay() != 0) {
    _this->_impl_.delay_ = from._impl_.delay_;
  }
  if (from._internal_repeat() != 0) {
    _this->_impl_.repeat_ = from._impl_.repeat_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TimerEvent::CopyFrom(const TimerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Base.TimerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TimerEvent::IsInitialized() const {
  return true;
}

void TimerEvent::InternalSwap(TimerEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.repeat_)
      + sizeof(TimerEvent::_impl_.repeat_)
      - PROTOBUF_FIELD_OFFSET(TimerEvent, _impl_.code_)>(
          reinterpret_cast<char*>(&_impl_.code_),
          reinterpret_cast<char*>(&other->_impl_.code_));
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Base
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
