// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Client.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_Client_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Client_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Client_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Client_2eproto {
  static const ::uint32_t offsets[];
};
namespace Pb {
namespace Client {
class PlayerLoginReq;
struct PlayerLoginReqDefaultTypeInternal;
extern PlayerLoginReqDefaultTypeInternal _PlayerLoginReq_default_instance_;
class PlayerLoginRes;
struct PlayerLoginResDefaultTypeInternal;
extern PlayerLoginResDefaultTypeInternal _PlayerLoginRes_default_instance_;
}  // namespace Client
}  // namespace Pb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Pb {
namespace Client {
enum MsgId : int {
  id0 = 0,
  ID_PlayerLoginReq = 1000,
  ID_PlayerLoginRes = 1001,
  MsgId_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MsgId_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MsgId_IsValid(int value);
extern const uint32_t MsgId_internal_data_[];
constexpr MsgId MsgId_MIN = static_cast<MsgId>(0);
constexpr MsgId MsgId_MAX = static_cast<MsgId>(1001);
constexpr int MsgId_ARRAYSIZE = 1001 + 1;
const std::string& MsgId_Name(MsgId value);
template <typename T>
const std::string& MsgId_Name(T value) {
  static_assert(std::is_same<T, MsgId>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MsgId_Name().");
  return MsgId_Name(static_cast<MsgId>(value));
}
bool MsgId_Parse(absl::string_view name, MsgId* value);
enum OS_PLATFORM : int {
  OS_UNKNOWN = 0,
  OS_DESKTOP = 1,
  OS_ANDROID = 2,
  OS_IOS = 3,
  OS_PLATFORM_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OS_PLATFORM_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OS_PLATFORM_IsValid(int value);
extern const uint32_t OS_PLATFORM_internal_data_[];
constexpr OS_PLATFORM OS_PLATFORM_MIN = static_cast<OS_PLATFORM>(0);
constexpr OS_PLATFORM OS_PLATFORM_MAX = static_cast<OS_PLATFORM>(3);
constexpr int OS_PLATFORM_ARRAYSIZE = 3 + 1;
const std::string& OS_PLATFORM_Name(OS_PLATFORM value);
template <typename T>
const std::string& OS_PLATFORM_Name(T value) {
  static_assert(std::is_same<T, OS_PLATFORM>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OS_PLATFORM_Name().");
  return OS_PLATFORM_Name(static_cast<OS_PLATFORM>(value));
}
bool OS_PLATFORM_Parse(absl::string_view name, OS_PLATFORM* value);
enum LoginAppSdk : int {
  UNKNOWN_LAS = 0,
  IDANDPASSWORD = 1,
  WECHAT = 2,
  KEY_ENC = 3,
  LoginAppSdk_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LoginAppSdk_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LoginAppSdk_IsValid(int value);
extern const uint32_t LoginAppSdk_internal_data_[];
constexpr LoginAppSdk LoginAppSdk_MIN = static_cast<LoginAppSdk>(0);
constexpr LoginAppSdk LoginAppSdk_MAX = static_cast<LoginAppSdk>(3);
constexpr int LoginAppSdk_ARRAYSIZE = 3 + 1;
const std::string& LoginAppSdk_Name(LoginAppSdk value);
template <typename T>
const std::string& LoginAppSdk_Name(T value) {
  static_assert(std::is_same<T, LoginAppSdk>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LoginAppSdk_Name().");
  return LoginAppSdk_Name(static_cast<LoginAppSdk>(value));
}
bool LoginAppSdk_Parse(absl::string_view name, LoginAppSdk* value);

// ===================================================================


// -------------------------------------------------------------------

class PlayerLoginRes final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:Pb.Client.PlayerLoginRes) */ {
 public:
  inline PlayerLoginRes() : PlayerLoginRes(nullptr) {}
  ~PlayerLoginRes() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerLoginRes(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerLoginRes(const PlayerLoginRes& from) : PlayerLoginRes(nullptr, from) {}
  inline PlayerLoginRes(PlayerLoginRes&& from) noexcept
      : PlayerLoginRes(nullptr, std::move(from)) {}
  inline PlayerLoginRes& operator=(const PlayerLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLoginRes& operator=(PlayerLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PlayerLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerLoginRes* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginRes*>(
        &_PlayerLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PlayerLoginRes& a, PlayerLoginRes& b) { a.Swap(&b); }
  inline void Swap(PlayerLoginRes* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerLoginRes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerLoginRes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<PlayerLoginRes>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const PlayerLoginRes& from);
  void MergeFrom(const PlayerLoginRes& from);
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerLoginRes* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Pb.Client.PlayerLoginRes"; }

 protected:
  explicit PlayerLoginRes(::google::protobuf::Arena* arena);
  PlayerLoginRes(::google::protobuf::Arena* arena, const PlayerLoginRes& from);
  PlayerLoginRes(::google::protobuf::Arena* arena, PlayerLoginRes&& from) noexcept
      : PlayerLoginRes(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 2,
    kNameFieldNumber = 4,
    kPlayeridFieldNumber = 3,
    kResultFieldNumber = 1,
    kSexFieldNumber = 5,
  };
  // string key = 2;
  void clear_key() ;
  const std::string& key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key(Arg_&& arg, Args_... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* value);

  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(
      const std::string& value);
  std::string* _internal_mutable_key();

  public:
  // string name = 4;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint64 playerid = 3;
  void clear_playerid() ;
  ::uint64_t playerid() const;
  void set_playerid(::uint64_t value);

  private:
  ::uint64_t _internal_playerid() const;
  void _internal_set_playerid(::uint64_t value);

  public:
  // int32 result = 1;
  void clear_result() ;
  ::int32_t result() const;
  void set_result(::int32_t value);

  private:
  ::int32_t _internal_result() const;
  void _internal_set_result(::int32_t value);

  public:
  // int32 sex = 5;
  void clear_sex() ;
  ::int32_t sex() const;
  void set_sex(::int32_t value);

  private:
  ::int32_t _internal_sex() const;
  void _internal_set_sex(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Pb.Client.PlayerLoginRes)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      40, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr key_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint64_t playerid_;
    ::int32_t result_;
    ::int32_t sex_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_2eproto;
};
// -------------------------------------------------------------------

class PlayerLoginReq final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:Pb.Client.PlayerLoginReq) */ {
 public:
  inline PlayerLoginReq() : PlayerLoginReq(nullptr) {}
  ~PlayerLoginReq() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerLoginReq(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerLoginReq(const PlayerLoginReq& from) : PlayerLoginReq(nullptr, from) {}
  inline PlayerLoginReq(PlayerLoginReq&& from) noexcept
      : PlayerLoginReq(nullptr, std::move(from)) {}
  inline PlayerLoginReq& operator=(const PlayerLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLoginReq& operator=(PlayerLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PlayerLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerLoginReq* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginReq*>(
        &_PlayerLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PlayerLoginReq& a, PlayerLoginReq& b) { a.Swap(&b); }
  inline void Swap(PlayerLoginReq* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerLoginReq* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerLoginReq* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<PlayerLoginReq>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const PlayerLoginReq& from);
  void MergeFrom(const PlayerLoginReq& from);
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PlayerLoginReq* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Pb.Client.PlayerLoginReq"; }

 protected:
  explicit PlayerLoginReq(::google::protobuf::Arena* arena);
  PlayerLoginReq(::google::protobuf::Arena* arena, const PlayerLoginReq& from);
  PlayerLoginReq(::google::protobuf::Arena* arena, PlayerLoginReq&& from) noexcept
      : PlayerLoginReq(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 3,
    kPassFieldNumber = 4,
    kAppSpecFieldNumber = 5,
    kKeysEncFieldNumber = 6,
    kOsplatformFieldNumber = 1,
    kLasFieldNumber = 2,
  };
  // string id = 3;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string pass = 4;
  void clear_pass() ;
  const std::string& pass() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pass(Arg_&& arg, Args_... args);
  std::string* mutable_pass();
  PROTOBUF_NODISCARD std::string* release_pass();
  void set_allocated_pass(std::string* value);

  private:
  const std::string& _internal_pass() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pass(
      const std::string& value);
  std::string* _internal_mutable_pass();

  public:
  // string app_spec = 5;
  void clear_app_spec() ;
  const std::string& app_spec() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_spec(Arg_&& arg, Args_... args);
  std::string* mutable_app_spec();
  PROTOBUF_NODISCARD std::string* release_app_spec();
  void set_allocated_app_spec(std::string* value);

  private:
  const std::string& _internal_app_spec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_spec(
      const std::string& value);
  std::string* _internal_mutable_app_spec();

  public:
  // string keys_enc = 6;
  void clear_keys_enc() ;
  const std::string& keys_enc() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_keys_enc(Arg_&& arg, Args_... args);
  std::string* mutable_keys_enc();
  PROTOBUF_NODISCARD std::string* release_keys_enc();
  void set_allocated_keys_enc(std::string* value);

  private:
  const std::string& _internal_keys_enc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keys_enc(
      const std::string& value);
  std::string* _internal_mutable_keys_enc();

  public:
  // .Pb.Client.OS_PLATFORM osplatform = 1;
  void clear_osplatform() ;
  ::Pb::Client::OS_PLATFORM osplatform() const;
  void set_osplatform(::Pb::Client::OS_PLATFORM value);

  private:
  ::Pb::Client::OS_PLATFORM _internal_osplatform() const;
  void _internal_set_osplatform(::Pb::Client::OS_PLATFORM value);

  public:
  // .Pb.Client.LoginAppSdk las = 2;
  void clear_las() ;
  ::Pb::Client::LoginAppSdk las() const;
  void set_las(::Pb::Client::LoginAppSdk value);

  private:
  ::Pb::Client::LoginAppSdk _internal_las() const;
  void _internal_set_las(::Pb::Client::LoginAppSdk value);

  public:
  // @@protoc_insertion_point(class_scope:Pb.Client.PlayerLoginReq)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr pass_;
    ::google::protobuf::internal::ArenaStringPtr app_spec_;
    ::google::protobuf::internal::ArenaStringPtr keys_enc_;
    int osplatform_;
    int las_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Client_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlayerLoginReq

// .Pb.Client.OS_PLATFORM osplatform = 1;
inline void PlayerLoginReq::clear_osplatform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.osplatform_ = 0;
}
inline ::Pb::Client::OS_PLATFORM PlayerLoginReq::osplatform() const {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginReq.osplatform)
  return _internal_osplatform();
}
inline void PlayerLoginReq::set_osplatform(::Pb::Client::OS_PLATFORM value) {
  _internal_set_osplatform(value);
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginReq.osplatform)
}
inline ::Pb::Client::OS_PLATFORM PlayerLoginReq::_internal_osplatform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Pb::Client::OS_PLATFORM>(_impl_.osplatform_);
}
inline void PlayerLoginReq::_internal_set_osplatform(::Pb::Client::OS_PLATFORM value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.osplatform_ = value;
}

// .Pb.Client.LoginAppSdk las = 2;
inline void PlayerLoginReq::clear_las() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.las_ = 0;
}
inline ::Pb::Client::LoginAppSdk PlayerLoginReq::las() const {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginReq.las)
  return _internal_las();
}
inline void PlayerLoginReq::set_las(::Pb::Client::LoginAppSdk value) {
  _internal_set_las(value);
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginReq.las)
}
inline ::Pb::Client::LoginAppSdk PlayerLoginReq::_internal_las() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Pb::Client::LoginAppSdk>(_impl_.las_);
}
inline void PlayerLoginReq::_internal_set_las(::Pb::Client::LoginAppSdk value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.las_ = value;
}

// string id = 3;
inline void PlayerLoginReq::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& PlayerLoginReq::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginReq.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLoginReq::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginReq.id)
}
inline std::string* PlayerLoginReq::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Pb.Client.PlayerLoginReq.id)
  return _s;
}
inline const std::string& PlayerLoginReq::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void PlayerLoginReq::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* PlayerLoginReq::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* PlayerLoginReq::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Pb.Client.PlayerLoginReq.id)
  return _impl_.id_.Release();
}
inline void PlayerLoginReq::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Pb.Client.PlayerLoginReq.id)
}

// string pass = 4;
inline void PlayerLoginReq::clear_pass() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pass_.ClearToEmpty();
}
inline const std::string& PlayerLoginReq::pass() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginReq.pass)
  return _internal_pass();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLoginReq::set_pass(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pass_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginReq.pass)
}
inline std::string* PlayerLoginReq::mutable_pass() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_pass();
  // @@protoc_insertion_point(field_mutable:Pb.Client.PlayerLoginReq.pass)
  return _s;
}
inline const std::string& PlayerLoginReq::_internal_pass() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pass_.Get();
}
inline void PlayerLoginReq::_internal_set_pass(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pass_.Set(value, GetArena());
}
inline std::string* PlayerLoginReq::_internal_mutable_pass() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.pass_.Mutable( GetArena());
}
inline std::string* PlayerLoginReq::release_pass() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Pb.Client.PlayerLoginReq.pass)
  return _impl_.pass_.Release();
}
inline void PlayerLoginReq::set_allocated_pass(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pass_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pass_.IsDefault()) {
          _impl_.pass_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Pb.Client.PlayerLoginReq.pass)
}

// string app_spec = 5;
inline void PlayerLoginReq::clear_app_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_spec_.ClearToEmpty();
}
inline const std::string& PlayerLoginReq::app_spec() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginReq.app_spec)
  return _internal_app_spec();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLoginReq::set_app_spec(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_spec_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginReq.app_spec)
}
inline std::string* PlayerLoginReq::mutable_app_spec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_app_spec();
  // @@protoc_insertion_point(field_mutable:Pb.Client.PlayerLoginReq.app_spec)
  return _s;
}
inline const std::string& PlayerLoginReq::_internal_app_spec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.app_spec_.Get();
}
inline void PlayerLoginReq::_internal_set_app_spec(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_spec_.Set(value, GetArena());
}
inline std::string* PlayerLoginReq::_internal_mutable_app_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.app_spec_.Mutable( GetArena());
}
inline std::string* PlayerLoginReq::release_app_spec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Pb.Client.PlayerLoginReq.app_spec)
  return _impl_.app_spec_.Release();
}
inline void PlayerLoginReq::set_allocated_app_spec(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.app_spec_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_spec_.IsDefault()) {
          _impl_.app_spec_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Pb.Client.PlayerLoginReq.app_spec)
}

// string keys_enc = 6;
inline void PlayerLoginReq::clear_keys_enc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keys_enc_.ClearToEmpty();
}
inline const std::string& PlayerLoginReq::keys_enc() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginReq.keys_enc)
  return _internal_keys_enc();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLoginReq::set_keys_enc(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keys_enc_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginReq.keys_enc)
}
inline std::string* PlayerLoginReq::mutable_keys_enc() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_keys_enc();
  // @@protoc_insertion_point(field_mutable:Pb.Client.PlayerLoginReq.keys_enc)
  return _s;
}
inline const std::string& PlayerLoginReq::_internal_keys_enc() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.keys_enc_.Get();
}
inline void PlayerLoginReq::_internal_set_keys_enc(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keys_enc_.Set(value, GetArena());
}
inline std::string* PlayerLoginReq::_internal_mutable_keys_enc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.keys_enc_.Mutable( GetArena());
}
inline std::string* PlayerLoginReq::release_keys_enc() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Pb.Client.PlayerLoginReq.keys_enc)
  return _impl_.keys_enc_.Release();
}
inline void PlayerLoginReq::set_allocated_keys_enc(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.keys_enc_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.keys_enc_.IsDefault()) {
          _impl_.keys_enc_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Pb.Client.PlayerLoginReq.keys_enc)
}

// -------------------------------------------------------------------

// PlayerLoginRes

// int32 result = 1;
inline void PlayerLoginRes::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_ = 0;
}
inline ::int32_t PlayerLoginRes::result() const {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginRes.result)
  return _internal_result();
}
inline void PlayerLoginRes::set_result(::int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginRes.result)
}
inline ::int32_t PlayerLoginRes::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.result_;
}
inline void PlayerLoginRes::_internal_set_result(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_ = value;
}

// string key = 2;
inline void PlayerLoginRes::clear_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PlayerLoginRes::key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginRes.key)
  return _internal_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLoginRes::set_key(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginRes.key)
}
inline std::string* PlayerLoginRes::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:Pb.Client.PlayerLoginRes.key)
  return _s;
}
inline const std::string& PlayerLoginRes::_internal_key() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.key_.Get();
}
inline void PlayerLoginRes::_internal_set_key(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.Set(value, GetArena());
}
inline std::string* PlayerLoginRes::_internal_mutable_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.key_.Mutable( GetArena());
}
inline std::string* PlayerLoginRes::release_key() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Pb.Client.PlayerLoginRes.key)
  return _impl_.key_.Release();
}
inline void PlayerLoginRes::set_allocated_key(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.key_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_.IsDefault()) {
          _impl_.key_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Pb.Client.PlayerLoginRes.key)
}

// uint64 playerid = 3;
inline void PlayerLoginRes::clear_playerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = ::uint64_t{0u};
}
inline ::uint64_t PlayerLoginRes::playerid() const {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginRes.playerid)
  return _internal_playerid();
}
inline void PlayerLoginRes::set_playerid(::uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginRes.playerid)
}
inline ::uint64_t PlayerLoginRes::_internal_playerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playerid_;
}
inline void PlayerLoginRes::_internal_set_playerid(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playerid_ = value;
}

// string name = 4;
inline void PlayerLoginRes::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PlayerLoginRes::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginRes.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerLoginRes::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginRes.name)
}
inline std::string* PlayerLoginRes::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Pb.Client.PlayerLoginRes.name)
  return _s;
}
inline const std::string& PlayerLoginRes::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void PlayerLoginRes::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PlayerLoginRes::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PlayerLoginRes::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Pb.Client.PlayerLoginRes.name)
  return _impl_.name_.Release();
}
inline void PlayerLoginRes::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Pb.Client.PlayerLoginRes.name)
}

// int32 sex = 5;
inline void PlayerLoginRes::clear_sex() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sex_ = 0;
}
inline ::int32_t PlayerLoginRes::sex() const {
  // @@protoc_insertion_point(field_get:Pb.Client.PlayerLoginRes.sex)
  return _internal_sex();
}
inline void PlayerLoginRes::set_sex(::int32_t value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:Pb.Client.PlayerLoginRes.sex)
}
inline ::int32_t PlayerLoginRes::_internal_sex() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sex_;
}
inline void PlayerLoginRes::_internal_set_sex(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sex_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Client
}  // namespace Pb


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Pb::Client::MsgId> : std::true_type {};
template <>
struct is_proto_enum<::Pb::Client::OS_PLATFORM> : std::true_type {};
template <>
struct is_proto_enum<::Pb::Client::LoginAppSdk> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Client_2eproto_2epb_2eh
