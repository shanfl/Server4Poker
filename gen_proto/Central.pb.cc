// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Central.proto
// Protobuf C++ Version: 5.26.0

#include "Central.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace Pb {
namespace Central {

inline constexpr RegisterToCentral::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : servername_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        servertype_{0},
        serverindex_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegisterToCentral::RegisterToCentral(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegisterToCentralDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterToCentralDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterToCentralDefaultTypeInternal() {}
  union {
    RegisterToCentral _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterToCentralDefaultTypeInternal _RegisterToCentral_default_instance_;

inline constexpr CentralHeartBeat::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : natsclients_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CentralHeartBeat::CentralHeartBeat(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CentralHeartBeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CentralHeartBeatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CentralHeartBeatDefaultTypeInternal() {}
  union {
    CentralHeartBeat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CentralHeartBeatDefaultTypeInternal _CentralHeartBeat_default_instance_;
}  // namespace Central
}  // namespace Pb
namespace Pb {
namespace Central {
PROTOBUF_CONSTINIT const uint32_t MsgID_internal_data_[] = {
    65536u, 131072u, 3001u, 3000u, };
bool MsgID_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, MsgID_internal_data_);
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    MsgID_strings[3] = {};

static const char MsgID_names[] = {
    "ID_CentralHeartBeat"
    "ID_RegisterToCentral"
    "MsgID_Central_0"
};

static const ::google::protobuf::internal::EnumEntry MsgID_entries[] =
    {
        {{&MsgID_names[0], 19}, 3001},
        {{&MsgID_names[19], 20}, 3000},
        {{&MsgID_names[39], 15}, 0},
};

static const int MsgID_entries_by_number[] = {
    2,  // 0 -> MsgID_Central_0
    1,  // 3000 -> ID_RegisterToCentral
    0,  // 3001 -> ID_CentralHeartBeat
};

const std::string& MsgID_Name(MsgID value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          MsgID_entries, MsgID_entries_by_number,
          3, MsgID_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      MsgID_entries, MsgID_entries_by_number, 3,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : MsgID_strings[idx].get();
}

bool MsgID_Parse(absl::string_view name, MsgID* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      MsgID_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MsgID>(int_value);
  }
  return success;
}
// ===================================================================

class RegisterToCentral::_Internal {
 public:
};

RegisterToCentral::RegisterToCentral(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Pb.Central.RegisterToCentral)
}
inline PROTOBUF_NDEBUG_INLINE RegisterToCentral::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : servername_(arena, from.servername_),
        _cached_size_{0} {}

RegisterToCentral::RegisterToCentral(
    ::google::protobuf::Arena* arena,
    const RegisterToCentral& from)
    : ::google::protobuf::MessageLite(arena) {
  RegisterToCentral* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, servertype_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, servertype_),
           offsetof(Impl_, serverindex_) -
               offsetof(Impl_, servertype_) +
               sizeof(Impl_::serverindex_));

  // @@protoc_insertion_point(copy_constructor:Pb.Central.RegisterToCentral)
}
inline PROTOBUF_NDEBUG_INLINE RegisterToCentral::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : servername_(arena),
        _cached_size_{0} {}

inline void RegisterToCentral::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, servertype_),
           0,
           offsetof(Impl_, serverindex_) -
               offsetof(Impl_, servertype_) +
               sizeof(Impl_::serverindex_));
}
RegisterToCentral::~RegisterToCentral() {
  // @@protoc_insertion_point(destructor:Pb.Central.RegisterToCentral)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void RegisterToCentral::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.servername_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
RegisterToCentral::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[29];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_._cached_size_),
          true,
      },
      "Pb.Central.RegisterToCentral",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void RegisterToCentral::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.Central.RegisterToCentral)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servername_.ClearToEmpty();
  ::memset(&_impl_.servertype_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.serverindex_) -
      reinterpret_cast<char*>(&_impl_.servertype_)) + sizeof(_impl_.serverindex_));
  _internal_metadata_.Clear<std::string>();
}

const char* RegisterToCentral::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 47, 2> RegisterToCentral::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RegisterToCentral_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Pb::Central::RegisterToCentral>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string servername = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_.servername_)}},
    // int32 servertype = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_.servertype_)}},
    // int32 serverindex = 3;
    {::_pbi::TcParser::FastV32S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_.serverindex_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string servername = 1;
    {PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_.servername_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 servertype = 2;
    {PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_.servertype_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 serverindex = 3;
    {PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_.serverindex_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\34\12\0\0\0\0\0\0"
    "Pb.Central.RegisterToCentral"
    "servername"
  }},
};

::uint8_t* RegisterToCentral::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pb.Central.RegisterToCentral)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string servername = 1;
  if (!this->_internal_servername().empty()) {
    const std::string& _s = this->_internal_servername();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Pb.Central.RegisterToCentral.servername");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 servertype = 2;
  if (this->_internal_servertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_servertype(), target);
  }

  // int32 serverindex = 3;
  if (this->_internal_serverindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_serverindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.Central.RegisterToCentral)
  return target;
}

::size_t RegisterToCentral::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.Central.RegisterToCentral)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string servername = 1;
  if (!this->_internal_servername().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_servername());
  }

  // int32 servertype = 2;
  if (this->_internal_servertype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_servertype());
  }

  // int32 serverindex = 3;
  if (this->_internal_serverindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_serverindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void RegisterToCentral::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RegisterToCentral*>(
      &from));
}

void RegisterToCentral::MergeFrom(const RegisterToCentral& from) {
  RegisterToCentral* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Pb.Central.RegisterToCentral)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servername().empty()) {
    _this->_internal_set_servername(from._internal_servername());
  }
  if (from._internal_servertype() != 0) {
    _this->_impl_.servertype_ = from._impl_.servertype_;
  }
  if (from._internal_serverindex() != 0) {
    _this->_impl_.serverindex_ = from._impl_.serverindex_;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RegisterToCentral::CopyFrom(const RegisterToCentral& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.Central.RegisterToCentral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegisterToCentral::IsInitialized() const {
  return true;
}

void RegisterToCentral::InternalSwap(RegisterToCentral* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.servername_, &other->_impl_.servername_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_.serverindex_)
      + sizeof(RegisterToCentral::_impl_.serverindex_)
      - PROTOBUF_FIELD_OFFSET(RegisterToCentral, _impl_.servertype_)>(
          reinterpret_cast<char*>(&_impl_.servertype_),
          reinterpret_cast<char*>(&other->_impl_.servertype_));
}

// ===================================================================

class CentralHeartBeat::_Internal {
 public:
};

CentralHeartBeat::CentralHeartBeat(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Pb.Central.CentralHeartBeat)
}
inline PROTOBUF_NDEBUG_INLINE CentralHeartBeat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : natsclients_{visibility, arena, from.natsclients_},
        _cached_size_{0} {}

CentralHeartBeat::CentralHeartBeat(
    ::google::protobuf::Arena* arena,
    const CentralHeartBeat& from)
    : ::google::protobuf::MessageLite(arena) {
  CentralHeartBeat* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:Pb.Central.CentralHeartBeat)
}
inline PROTOBUF_NDEBUG_INLINE CentralHeartBeat::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : natsclients_{visibility, arena},
        _cached_size_{0} {}

inline void CentralHeartBeat::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CentralHeartBeat::~CentralHeartBeat() {
  // @@protoc_insertion_point(destructor:Pb.Central.CentralHeartBeat)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void CentralHeartBeat::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
CentralHeartBeat::GetClassData() const {
  struct ClassData_ {
    ::google::protobuf::MessageLite::ClassData header;
    char type_name[28];
  };

  PROTOBUF_CONSTINIT static const ClassData_ _data_ = {
      {
          nullptr,  // OnDemandRegisterArenaDtor
          PROTOBUF_FIELD_OFFSET(CentralHeartBeat, _impl_._cached_size_),
          true,
      },
      "Pb.Central.CentralHeartBeat",
  };

  return &_data_.header;
}
PROTOBUF_NOINLINE void CentralHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:Pb.Central.CentralHeartBeat)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.natsclients_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CentralHeartBeat::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CentralHeartBeat::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CentralHeartBeat_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Pb::Central::CentralHeartBeat>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .Pb.Central.RegisterToCentral natsclients = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CentralHeartBeat, _impl_.natsclients_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .Pb.Central.RegisterToCentral natsclients = 1;
    {PROTOBUF_FIELD_OFFSET(CentralHeartBeat, _impl_.natsclients_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Pb::Central::RegisterToCentral>()},
  }}, {{
  }},
};

::uint8_t* CentralHeartBeat::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Pb.Central.CentralHeartBeat)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .Pb.Central.RegisterToCentral natsclients = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_natsclients_size());
       i < n; i++) {
    const auto& repfield = this->_internal_natsclients().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Pb.Central.CentralHeartBeat)
  return target;
}

::size_t CentralHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Pb.Central.CentralHeartBeat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Pb.Central.RegisterToCentral natsclients = 1;
  total_size += 1UL * this->_internal_natsclients_size();
  for (const auto& msg : this->_internal_natsclients()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void CentralHeartBeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CentralHeartBeat*>(
      &from));
}

void CentralHeartBeat::MergeFrom(const CentralHeartBeat& from) {
  CentralHeartBeat* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:Pb.Central.CentralHeartBeat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_natsclients()->MergeFrom(
      from._internal_natsclients());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CentralHeartBeat::CopyFrom(const CentralHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Pb.Central.CentralHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CentralHeartBeat::IsInitialized() const {
  return true;
}

void CentralHeartBeat::InternalSwap(CentralHeartBeat* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.natsclients_.InternalSwap(&other->_impl_.natsclients_);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Central
}  // namespace Pb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
