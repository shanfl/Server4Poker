// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Core.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_Core_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Core_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Core_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Core_2eproto {
  static const ::uint32_t offsets[];
};
namespace Ps {
class ProtoMsgWrapper;
struct ProtoMsgWrapperDefaultTypeInternal;
extern ProtoMsgWrapperDefaultTypeInternal _ProtoMsgWrapper_default_instance_;
}  // namespace Ps
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Ps {

// ===================================================================


// -------------------------------------------------------------------

class ProtoMsgWrapper final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:Ps.ProtoMsgWrapper) */ {
 public:
  inline ProtoMsgWrapper() : ProtoMsgWrapper(nullptr) {}
  ~ProtoMsgWrapper() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ProtoMsgWrapper(
      ::google::protobuf::internal::ConstantInitialized);

  inline ProtoMsgWrapper(const ProtoMsgWrapper& from) : ProtoMsgWrapper(nullptr, from) {}
  inline ProtoMsgWrapper(ProtoMsgWrapper&& from) noexcept
      : ProtoMsgWrapper(nullptr, std::move(from)) {}
  inline ProtoMsgWrapper& operator=(const ProtoMsgWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoMsgWrapper& operator=(ProtoMsgWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ProtoMsgWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtoMsgWrapper* internal_default_instance() {
    return reinterpret_cast<const ProtoMsgWrapper*>(
        &_ProtoMsgWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ProtoMsgWrapper& a, ProtoMsgWrapper& b) { a.Swap(&b); }
  inline void Swap(ProtoMsgWrapper* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoMsgWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtoMsgWrapper* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<ProtoMsgWrapper>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const ProtoMsgWrapper& from);
  void MergeFrom(const ProtoMsgWrapper& from);
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProtoMsgWrapper* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Ps.ProtoMsgWrapper"; }

 protected:
  explicit ProtoMsgWrapper(::google::protobuf::Arena* arena);
  ProtoMsgWrapper(::google::protobuf::Arena* arena, const ProtoMsgWrapper& from);
  ProtoMsgWrapper(::google::protobuf::Arena* arena, ProtoMsgWrapper&& from) noexcept
      : ProtoMsgWrapper(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAppnameFieldNumber = 1,
    kCookieFieldNumber = 5,
    kMsgFieldNumber = 6,
    kAppindxFieldNumber = 2,
    kIdFieldNumber = 3,
    kZippedFieldNumber = 4,
  };
  // string appname = 1;
  void clear_appname() ;
  const std::string& appname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_appname(Arg_&& arg, Args_... args);
  std::string* mutable_appname();
  PROTOBUF_NODISCARD std::string* release_appname();
  void set_allocated_appname(std::string* value);

  private:
  const std::string& _internal_appname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appname(
      const std::string& value);
  std::string* _internal_mutable_appname();

  public:
  // string cookie = 5;
  void clear_cookie() ;
  const std::string& cookie() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cookie(Arg_&& arg, Args_... args);
  std::string* mutable_cookie();
  PROTOBUF_NODISCARD std::string* release_cookie();
  void set_allocated_cookie(std::string* value);

  private:
  const std::string& _internal_cookie() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cookie(
      const std::string& value);
  std::string* _internal_mutable_cookie();

  public:
  // string msg = 6;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // int32 appindx = 2;
  void clear_appindx() ;
  ::int32_t appindx() const;
  void set_appindx(::int32_t value);

  private:
  ::int32_t _internal_appindx() const;
  void _internal_set_appindx(::int32_t value);

  public:
  // int32 id = 3;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 zipped = 4;
  void clear_zipped() ;
  ::int32_t zipped() const;
  void set_zipped(::int32_t value);

  private:
  ::int32_t _internal_zipped() const;
  void _internal_set_zipped(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Ps.ProtoMsgWrapper)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr appname_;
    ::google::protobuf::internal::ArenaStringPtr cookie_;
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::int32_t appindx_;
    ::int32_t id_;
    ::int32_t zipped_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Core_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProtoMsgWrapper

// string appname = 1;
inline void ProtoMsgWrapper::clear_appname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.appname_.ClearToEmpty();
}
inline const std::string& ProtoMsgWrapper::appname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Ps.ProtoMsgWrapper.appname)
  return _internal_appname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtoMsgWrapper::set_appname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.appname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Ps.ProtoMsgWrapper.appname)
}
inline std::string* ProtoMsgWrapper::mutable_appname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_appname();
  // @@protoc_insertion_point(field_mutable:Ps.ProtoMsgWrapper.appname)
  return _s;
}
inline const std::string& ProtoMsgWrapper::_internal_appname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.appname_.Get();
}
inline void ProtoMsgWrapper::_internal_set_appname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.appname_.Set(value, GetArena());
}
inline std::string* ProtoMsgWrapper::_internal_mutable_appname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.appname_.Mutable( GetArena());
}
inline std::string* ProtoMsgWrapper::release_appname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Ps.ProtoMsgWrapper.appname)
  return _impl_.appname_.Release();
}
inline void ProtoMsgWrapper::set_allocated_appname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.appname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.appname_.IsDefault()) {
          _impl_.appname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Ps.ProtoMsgWrapper.appname)
}

// int32 appindx = 2;
inline void ProtoMsgWrapper::clear_appindx() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.appindx_ = 0;
}
inline ::int32_t ProtoMsgWrapper::appindx() const {
  // @@protoc_insertion_point(field_get:Ps.ProtoMsgWrapper.appindx)
  return _internal_appindx();
}
inline void ProtoMsgWrapper::set_appindx(::int32_t value) {
  _internal_set_appindx(value);
  // @@protoc_insertion_point(field_set:Ps.ProtoMsgWrapper.appindx)
}
inline ::int32_t ProtoMsgWrapper::_internal_appindx() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.appindx_;
}
inline void ProtoMsgWrapper::_internal_set_appindx(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.appindx_ = value;
}

// int32 id = 3;
inline void ProtoMsgWrapper::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t ProtoMsgWrapper::id() const {
  // @@protoc_insertion_point(field_get:Ps.ProtoMsgWrapper.id)
  return _internal_id();
}
inline void ProtoMsgWrapper::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Ps.ProtoMsgWrapper.id)
}
inline ::int32_t ProtoMsgWrapper::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ProtoMsgWrapper::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// int32 zipped = 4;
inline void ProtoMsgWrapper::clear_zipped() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zipped_ = 0;
}
inline ::int32_t ProtoMsgWrapper::zipped() const {
  // @@protoc_insertion_point(field_get:Ps.ProtoMsgWrapper.zipped)
  return _internal_zipped();
}
inline void ProtoMsgWrapper::set_zipped(::int32_t value) {
  _internal_set_zipped(value);
  // @@protoc_insertion_point(field_set:Ps.ProtoMsgWrapper.zipped)
}
inline ::int32_t ProtoMsgWrapper::_internal_zipped() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zipped_;
}
inline void ProtoMsgWrapper::_internal_set_zipped(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zipped_ = value;
}

// string cookie = 5;
inline void ProtoMsgWrapper::clear_cookie() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cookie_.ClearToEmpty();
}
inline const std::string& ProtoMsgWrapper::cookie() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Ps.ProtoMsgWrapper.cookie)
  return _internal_cookie();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtoMsgWrapper::set_cookie(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cookie_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Ps.ProtoMsgWrapper.cookie)
}
inline std::string* ProtoMsgWrapper::mutable_cookie() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cookie();
  // @@protoc_insertion_point(field_mutable:Ps.ProtoMsgWrapper.cookie)
  return _s;
}
inline const std::string& ProtoMsgWrapper::_internal_cookie() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cookie_.Get();
}
inline void ProtoMsgWrapper::_internal_set_cookie(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cookie_.Set(value, GetArena());
}
inline std::string* ProtoMsgWrapper::_internal_mutable_cookie() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.cookie_.Mutable( GetArena());
}
inline std::string* ProtoMsgWrapper::release_cookie() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Ps.ProtoMsgWrapper.cookie)
  return _impl_.cookie_.Release();
}
inline void ProtoMsgWrapper::set_allocated_cookie(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cookie_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cookie_.IsDefault()) {
          _impl_.cookie_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Ps.ProtoMsgWrapper.cookie)
}

// string msg = 6;
inline void ProtoMsgWrapper::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& ProtoMsgWrapper::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Ps.ProtoMsgWrapper.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProtoMsgWrapper::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Ps.ProtoMsgWrapper.msg)
}
inline std::string* ProtoMsgWrapper::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Ps.ProtoMsgWrapper.msg)
  return _s;
}
inline const std::string& ProtoMsgWrapper::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void ProtoMsgWrapper::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* ProtoMsgWrapper::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* ProtoMsgWrapper::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Ps.ProtoMsgWrapper.msg)
  return _impl_.msg_.Release();
}
inline void ProtoMsgWrapper::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Ps.ProtoMsgWrapper.msg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Ps


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Core_2eproto_2epb_2eh
