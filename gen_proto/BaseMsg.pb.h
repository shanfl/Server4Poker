// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BaseMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BaseMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BaseMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BaseMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace base {
class BaseMsg;
class BaseMsgDefaultTypeInternal;
extern BaseMsgDefaultTypeInternal _BaseMsg_default_instance_;
}  // namespace base
PROTOBUF_NAMESPACE_OPEN
template<> ::base::BaseMsg* Arena::CreateMaybeMessage<::base::BaseMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace base {

enum ServerType : int {
  NONE = 0,
  CLIENT = 1,
  GATE = 2,
  GAME = 3,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ServerType_IsValid(int value);
constexpr ServerType ServerType_MIN = NONE;
constexpr ServerType ServerType_MAX = GAME;
constexpr int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const std::string& ServerType_Name(ServerType value);
template<typename T>
inline const std::string& ServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerType_Name.");
  return ServerType_Name(static_cast<ServerType>(enum_t_value));
}
bool ServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerType* value);
// ===================================================================

class BaseMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:base.BaseMsg) */ {
 public:
  inline BaseMsg() : BaseMsg(nullptr) {}
  virtual ~BaseMsg();

  BaseMsg(const BaseMsg& from);
  BaseMsg(BaseMsg&& from) noexcept
    : BaseMsg() {
    *this = ::std::move(from);
  }

  inline BaseMsg& operator=(const BaseMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseMsg& operator=(BaseMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const BaseMsg& default_instance();

  static inline const BaseMsg* internal_default_instance() {
    return reinterpret_cast<const BaseMsg*>(
               &_BaseMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BaseMsg& a, BaseMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseMsg* New() const final {
    return CreateMaybeMessage<BaseMsg>(nullptr);
  }

  BaseMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseMsg>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BaseMsg& from);
  void MergeFrom(const BaseMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BaseMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.BaseMsg";
  }
  protected:
  explicit BaseMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kIdFieldNumber = 2,
    kVerisonFieldNumber = 1,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 verison = 1;
  void clear_verison();
  ::PROTOBUF_NAMESPACE_ID::int32 verison() const;
  void set_verison(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_verison() const;
  void _internal_set_verison(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:base.BaseMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 verison_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BaseMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BaseMsg

// int32 verison = 1;
inline void BaseMsg::clear_verison() {
  verison_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseMsg::_internal_verison() const {
  return verison_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseMsg::verison() const {
  // @@protoc_insertion_point(field_get:base.BaseMsg.verison)
  return _internal_verison();
}
inline void BaseMsg::_internal_set_verison(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  verison_ = value;
}
inline void BaseMsg::set_verison(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_verison(value);
  // @@protoc_insertion_point(field_set:base.BaseMsg.verison)
}

// int64 id = 2;
inline void BaseMsg::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BaseMsg::id() const {
  // @@protoc_insertion_point(field_get:base.BaseMsg.id)
  return _internal_id();
}
inline void BaseMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void BaseMsg::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:base.BaseMsg.id)
}

// string msg = 3;
inline void BaseMsg::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& BaseMsg::msg() const {
  // @@protoc_insertion_point(field_get:base.BaseMsg.msg)
  return _internal_msg();
}
inline void BaseMsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:base.BaseMsg.msg)
}
inline std::string* BaseMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:base.BaseMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& BaseMsg::_internal_msg() const {
  return msg_.Get();
}
inline void BaseMsg::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BaseMsg::set_msg(std::string&& value) {
  
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:base.BaseMsg.msg)
}
inline void BaseMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:base.BaseMsg.msg)
}
inline void BaseMsg::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:base.BaseMsg.msg)
}
inline std::string* BaseMsg::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BaseMsg::release_msg() {
  // @@protoc_insertion_point(field_release:base.BaseMsg.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BaseMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:base.BaseMsg.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::base::ServerType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BaseMsg_2eproto
