// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BaseMsg.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_BaseMsg_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_BaseMsg_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_BaseMsg_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_BaseMsg_2eproto {
  static const ::uint32_t offsets[];
};
namespace Base {
class BaseMsg;
struct BaseMsgDefaultTypeInternal;
extern BaseMsgDefaultTypeInternal _BaseMsg_default_instance_;
class TimerEvent;
struct TimerEventDefaultTypeInternal;
extern TimerEventDefaultTypeInternal _TimerEvent_default_instance_;
}  // namespace Base
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace Base {
enum ServerType : int {
  ST_NONE = 0,
  ST_CLIENT = 1,
  ST_GATE = 2,
  ST_GAME = 3,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ServerType_IsValid(int value);
extern const uint32_t ServerType_internal_data_[];
constexpr ServerType ServerType_MIN = static_cast<ServerType>(0);
constexpr ServerType ServerType_MAX = static_cast<ServerType>(3);
constexpr int ServerType_ARRAYSIZE = 3 + 1;
const std::string& ServerType_Name(ServerType value);
template <typename T>
const std::string& ServerType_Name(T value) {
  static_assert(std::is_same<T, ServerType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ServerType_Name().");
  return ServerType_Name(static_cast<ServerType>(value));
}
bool ServerType_Parse(absl::string_view name, ServerType* value);
enum TimerOpcode : int {
  TM_NONE = 0,
  TM_ADD = 1,
  TM_DEL = 2,
  TM_DEL_ALL = 3,
  TM_TICK = 4,
  TimerOpcode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TimerOpcode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TimerOpcode_IsValid(int value);
extern const uint32_t TimerOpcode_internal_data_[];
constexpr TimerOpcode TimerOpcode_MIN = static_cast<TimerOpcode>(0);
constexpr TimerOpcode TimerOpcode_MAX = static_cast<TimerOpcode>(4);
constexpr int TimerOpcode_ARRAYSIZE = 4 + 1;
const std::string& TimerOpcode_Name(TimerOpcode value);
template <typename T>
const std::string& TimerOpcode_Name(T value) {
  static_assert(std::is_same<T, TimerOpcode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TimerOpcode_Name().");
  return TimerOpcode_Name(static_cast<TimerOpcode>(value));
}
bool TimerOpcode_Parse(absl::string_view name, TimerOpcode* value);

// ===================================================================


// -------------------------------------------------------------------

class TimerEvent final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:Base.TimerEvent) */ {
 public:
  inline TimerEvent() : TimerEvent(nullptr) {}
  ~TimerEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TimerEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline TimerEvent(const TimerEvent& from) : TimerEvent(nullptr, from) {}
  inline TimerEvent(TimerEvent&& from) noexcept
      : TimerEvent(nullptr, std::move(from)) {}
  inline TimerEvent& operator=(const TimerEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerEvent& operator=(TimerEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const TimerEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimerEvent* internal_default_instance() {
    return reinterpret_cast<const TimerEvent*>(
        &_TimerEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(TimerEvent& a, TimerEvent& b) { a.Swap(&b); }
  inline void Swap(TimerEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimerEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimerEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<TimerEvent>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const TimerEvent& from);
  void MergeFrom(const TimerEvent& from);
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TimerEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Base.TimerEvent"; }

 protected:
  explicit TimerEvent(::google::protobuf::Arena* arena);
  TimerEvent(::google::protobuf::Arena* arena, const TimerEvent& from);
  TimerEvent(::google::protobuf::Arena* arena, TimerEvent&& from) noexcept
      : TimerEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCodeFieldNumber = 1,
    kIdFieldNumber = 2,
    kDelayFieldNumber = 3,
    kRepeatFieldNumber = 4,
  };
  // .Base.TimerOpcode code = 1;
  void clear_code() ;
  ::Base::TimerOpcode code() const;
  void set_code(::Base::TimerOpcode value);

  private:
  ::Base::TimerOpcode _internal_code() const;
  void _internal_set_code(::Base::TimerOpcode value);

  public:
  // int32 id = 2;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 delay = 3;
  void clear_delay() ;
  ::int32_t delay() const;
  void set_delay(::int32_t value);

  private:
  ::int32_t _internal_delay() const;
  void _internal_set_delay(::int32_t value);

  public:
  // int32 repeat = 4;
  void clear_repeat() ;
  ::int32_t repeat() const;
  void set_repeat(::int32_t value);

  private:
  ::int32_t _internal_repeat() const;
  void _internal_set_repeat(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Base.TimerEvent)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    int code_;
    ::int32_t id_;
    ::int32_t delay_;
    ::int32_t repeat_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMsg_2eproto;
};
// -------------------------------------------------------------------

class BaseMsg final : public ::google::protobuf::MessageLite
/* @@protoc_insertion_point(class_definition:Base.BaseMsg) */ {
 public:
  inline BaseMsg() : BaseMsg(nullptr) {}
  ~BaseMsg() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BaseMsg(
      ::google::protobuf::internal::ConstantInitialized);

  inline BaseMsg(const BaseMsg& from) : BaseMsg(nullptr, from) {}
  inline BaseMsg(BaseMsg&& from) noexcept
      : BaseMsg(nullptr, std::move(from)) {}
  inline BaseMsg& operator=(const BaseMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseMsg& operator=(BaseMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BaseMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseMsg* internal_default_instance() {
    return reinterpret_cast<const BaseMsg*>(
        &_BaseMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(BaseMsg& a, BaseMsg& b) { a.Swap(&b); }
  inline void Swap(BaseMsg* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseMsg* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::MessageLite::DefaultConstruct<BaseMsg>(arena);
  }
  void CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from) final;
  void CopyFrom(const BaseMsg& from);
  void MergeFrom(const BaseMsg& from);
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BaseMsg* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Base.BaseMsg"; }

 protected:
  explicit BaseMsg(::google::protobuf::Arena* arena);
  BaseMsg(::google::protobuf::Arena* arena, const BaseMsg& from);
  BaseMsg(::google::protobuf::Arena* arena, BaseMsg&& from) noexcept
      : BaseMsg(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 3,
    kIdFieldNumber = 2,
    kVerisonFieldNumber = 1,
  };
  // string msg = 3;
  void clear_msg() ;
  const std::string& msg() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_msg(Arg_&& arg, Args_... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* value);

  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(
      const std::string& value);
  std::string* _internal_mutable_msg();

  public:
  // int64 id = 2;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // int32 verison = 1;
  void clear_verison() ;
  ::int32_t verison() const;
  void set_verison(::int32_t value);

  private:
  ::int32_t _internal_verison() const;
  void _internal_set_verison(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Base.BaseMsg)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      24, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr msg_;
    ::int64_t id_;
    ::int32_t verison_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_BaseMsg_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BaseMsg

// int32 verison = 1;
inline void BaseMsg::clear_verison() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.verison_ = 0;
}
inline ::int32_t BaseMsg::verison() const {
  // @@protoc_insertion_point(field_get:Base.BaseMsg.verison)
  return _internal_verison();
}
inline void BaseMsg::set_verison(::int32_t value) {
  _internal_set_verison(value);
  // @@protoc_insertion_point(field_set:Base.BaseMsg.verison)
}
inline ::int32_t BaseMsg::_internal_verison() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.verison_;
}
inline void BaseMsg::_internal_set_verison(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.verison_ = value;
}

// int64 id = 2;
inline void BaseMsg::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
}
inline ::int64_t BaseMsg::id() const {
  // @@protoc_insertion_point(field_get:Base.BaseMsg.id)
  return _internal_id();
}
inline void BaseMsg::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Base.BaseMsg.id)
}
inline ::int64_t BaseMsg::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void BaseMsg::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// string msg = 3;
inline void BaseMsg::clear_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& BaseMsg::msg() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Base.BaseMsg.msg)
  return _internal_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaseMsg::set_msg(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Base.BaseMsg.msg)
}
inline std::string* BaseMsg::mutable_msg() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Base.BaseMsg.msg)
  return _s;
}
inline const std::string& BaseMsg::_internal_msg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.msg_.Get();
}
inline void BaseMsg::_internal_set_msg(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.Set(value, GetArena());
}
inline std::string* BaseMsg::_internal_mutable_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.msg_.Mutable( GetArena());
}
inline std::string* BaseMsg::release_msg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Base.BaseMsg.msg)
  return _impl_.msg_.Release();
}
inline void BaseMsg::set_allocated_msg(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.msg_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.msg_.IsDefault()) {
          _impl_.msg_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Base.BaseMsg.msg)
}

// -------------------------------------------------------------------

// TimerEvent

// .Base.TimerOpcode code = 1;
inline void TimerEvent::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::Base::TimerOpcode TimerEvent::code() const {
  // @@protoc_insertion_point(field_get:Base.TimerEvent.code)
  return _internal_code();
}
inline void TimerEvent::set_code(::Base::TimerOpcode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Base.TimerEvent.code)
}
inline ::Base::TimerOpcode TimerEvent::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::Base::TimerOpcode>(_impl_.code_);
}
inline void TimerEvent::_internal_set_code(::Base::TimerOpcode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = value;
}

// int32 id = 2;
inline void TimerEvent::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
}
inline ::int32_t TimerEvent::id() const {
  // @@protoc_insertion_point(field_get:Base.TimerEvent.id)
  return _internal_id();
}
inline void TimerEvent::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Base.TimerEvent.id)
}
inline ::int32_t TimerEvent::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void TimerEvent::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// int32 delay = 3;
inline void TimerEvent::clear_delay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delay_ = 0;
}
inline ::int32_t TimerEvent::delay() const {
  // @@protoc_insertion_point(field_get:Base.TimerEvent.delay)
  return _internal_delay();
}
inline void TimerEvent::set_delay(::int32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:Base.TimerEvent.delay)
}
inline ::int32_t TimerEvent::_internal_delay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delay_;
}
inline void TimerEvent::_internal_set_delay(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delay_ = value;
}

// int32 repeat = 4;
inline void TimerEvent::clear_repeat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.repeat_ = 0;
}
inline ::int32_t TimerEvent::repeat() const {
  // @@protoc_insertion_point(field_get:Base.TimerEvent.repeat)
  return _internal_repeat();
}
inline void TimerEvent::set_repeat(::int32_t value) {
  _internal_set_repeat(value);
  // @@protoc_insertion_point(field_set:Base.TimerEvent.repeat)
}
inline ::int32_t TimerEvent::_internal_repeat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repeat_;
}
inline void TimerEvent::_internal_set_repeat(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.repeat_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace Base


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::Base::ServerType> : std::true_type {};
template <>
struct is_proto_enum<::Base::TimerOpcode> : std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_BaseMsg_2eproto_2epb_2eh
